# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("//build/dart/dart_package.gni")

# Defines a Flutter application
#
# Parameters
#
#   main_dart (required)
#     Name of the Dart file containing the main function.
#
#   package_name (optional)
#     Name of the Dart package.
#
#   output_name (optional)
#     Name of output to generate. Defaults to $target_name.flx.
#
#   deps (optional)
#     List of Dart packages the application depends on.
#
#   manifest (optional)
#     Path to the manifest file
#
#   analysis_options (optional)
#     By default, a script to run the analyzer on the contents of the package is
#     generated in the output directory. This parameter contains the path to an
#     analysis options file for this target.
#
#   disable_analysis (optional)
#     Prevents the analysis script from being generated.
template("flutter_app") {
  assert(defined(invoker.main_dart), "Must define main_dart")

  dart_package_name = target_name + "_dart_package"

  dart_package(dart_package_name) {
    forward_variables_from(invoker,
                           [
                             "analysis_options",
                             "deps",
                             "disable_analysis",
                             "source_dir",
                           ])
    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    } else {
      infer_package_name = true
    }
  }

  if (defined(invoker.output_name)) {
    bundle_name = invoker.output_name
  } else {
    bundle_name = "${target_name}.flx"
  }

  flutter_snapshot_label = "//dart/runtime/bin:gen_snapshot($host_toolchain)"
  flutter_snapshot_dir = get_label_info(flutter_snapshot_label, "root_out_dir")
  flutter_snapshot = "$flutter_snapshot_dir/gen_snapshot"

  flutter_core_snapshot_label = "//flutter/lib/snapshot:generate_snapshot_bin"
  flutter_core_snapshot_gen_dir = get_label_info(flutter_core_snapshot_label, "target_gen_dir")
  flutter_core_snapshot_vm_data = "$flutter_core_snapshot_gen_dir/vm_isolate_snapshot.bin"
  flutter_core_snapshot_isolate_data = "$flutter_core_snapshot_gen_dir/isolate_snapshot.bin"

  flutter_root = "//lib/flutter"
  flutter_tools_label = "$flutter_root/packages/flutter_tools($host_toolchain)"
  flutter_tools_out_dir = get_label_info(flutter_tools_label, "root_out_dir")
  flutter_tools_bin = "$flutter_tools_out_dir/dart-tools/flutter_tools"

  dot_packages = "$target_gen_dir/$dart_package_name.packages"
  bundle_path = "$root_out_dir/$bundle_name"
  bundle_depfile = "$target_gen_dir/$bundle_name.d"
  snapshot_path = "$target_gen_dir/${target_name}_snapshot.bin"
  snapshot_depfile = "${snapshot_path}.d"

  main_dart = invoker.main_dart

  flutter_snapshot_name = target_name + "_snapshot"

  action(flutter_snapshot_name) {
    depfile = snapshot_depfile

    inputs = [
      main_dart,
    ]

    outputs = [
      snapshot_path,
    ]

    if (defined(invoker.sources)) {
      sources = invoker.sources
    }

    script = "//flutter/build/snapshot.py"

    args = [
      "--snapshotter-path",
      rebase_path(flutter_snapshot),
      "--vm-snapshot-data",
      rebase_path(flutter_core_snapshot_vm_data),
      "--isolate-snapshot-data",
      rebase_path(flutter_core_snapshot_isolate_data),
      "--main-dart",
      rebase_path(main_dart),
      "--packages",
      rebase_path(dot_packages),
      "--snapshot",
      rebase_path(snapshot_path, root_build_dir),
      "--depfile",
      rebase_path(snapshot_depfile),
      "--root-build-dir",
      rebase_path(root_build_dir),
    ]

    deps = [
      ":$dart_package_name",
      flutter_snapshot_label,
      flutter_core_snapshot_label,
    ]

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }

  action(target_name) {
    depfile = bundle_depfile

    inputs = [
      snapshot_path,
    ]
    if (defined(invoker.manifest)) {
      inputs += [ rebase_path(invoker.manifest) ]
    }

    outputs = [
      bundle_path,
    ]

    script = "//flutter/build/package.py"

    args = [
      "--flutter-root",
      rebase_path(flutter_root),
      "--flutter-tools",
      rebase_path(flutter_tools_bin),
      "--working-dir",
      rebase_path("$target_gen_dir/build"),
      "--app-dir",
      rebase_path("."),
      "--packages",
      rebase_path(dot_packages),
      "--output-file",
      rebase_path(bundle_path),
      "--snapshot",
      rebase_path(snapshot_path),
      "--build-root",
      rebase_path(root_build_dir),
      "--depfile",
      rebase_path(bundle_depfile),
    ]
    if (defined(invoker.manifest)) {
      args += [
        "--manifest",
        rebase_path(invoker.manifest),
      ]
    }

    deps = [
      ":$flutter_snapshot_name",
      flutter_tools_label,
    ]
  }
}
